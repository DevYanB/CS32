==================================================================================================================================================================================================================
SUMMARY
==================================================================================================================================================================================================================
The doubly linked list consists of nodes with 4 members: A key type variable with a corresponding value type variable, and two pointers: next, which keeps track of the element following the current node, and previous, which keeps track of the element preceding the current node. The ADT Bag holding the linked list is a class called Map. This Map contains two members: a pointer head that points to the start of the linked list, and an int m_size, which holds the number of elements in the linked list. It is to be noted that a tail pointer can also be included for ease of traversal. This can be taken a step further with the creation of a circular linked list, which overall makes the functions and algorithms of insertion/deletion (for example) easier to implement. However, this requires creation of a dummy node, and becomes a bit more complicated. This is not what I did, but is a solution. Additionally, since the ordering of the Linked List does not matter, the insertion only takes 2 cases, one where the element is being inserted at the top of an empty list, or at the top of a populated list.

==================================================================================================================================================================================================================
Destructor
==================================================================================================================================================================================================================
create pointer to keep track of current element
while the pointer is not nullptr:
	save the current node's next value into a temp variable
	delete the current node
	update current node to be equal to the temp variable
set the size of the list to 0;

==================================================================================================================================================================================================================
Copy Constructor
==================================================================================================================================================================================================================
initialize a Map with default values
for each element in the passed list:
	get the node (ie values) of element i
	insert that node into the list of calling Map(insert already increments for you)

==================================================================================================================================================================================================================
Assignment Operator
==================================================================================================================================================================================================================
return the Map object if the addresses are already the same
save the passed map into temp (can't modify passed map)
swap the caller Map's and the temp Map's sizes and head pointers (will call swap for this)
return the new object

==================================================================================================================================================================================================================
Map::contains
==================================================================================================================================================================================================================
create a pointer to keep track of the current element
go through the entire list:
	if the key of the node matches the passed key:
		return true
	otherwise continue through the list
return false

==================================================================================================================================================================================================================
Map::insert
==================================================================================================================================================================================================================
if the list contains a node with the same key:
	return false
create the node w/ key and value elements
if empty list:
	have head point to the new node
	have next and prev  = nullptr
	return true
(add to top of list):
previous head's prev is new node
next = previous head
prev = nullptr
increment size
return true
	
==================================================================================================================================================================================================================
Map::update
==================================================================================================================================================================================================================
if the list doesnt contain the key:
	return false
go through elements of the list:
	if key of current node == passed key:
		change value to passed value
		return true

==================================================================================================================================================================================================================
Map::erase
==================================================================================================================================================================================================================
return false if the key passed isn't in the list
return false if the list is empty
if head points to the node:
	set head to head's next pointer
	if there is element after original head:
		new head's previous is nullptr
	delete head
	decrement size
	return true
go through the list:
	if the node key == passed key:
		make previous key's next equal to the current key's next
		if there is a node after the current node:
			set the next node's previous pointer to the current's previous
		delete current node
		decrement size
		return true

==================================================================================================================================================================================================================
Map::get
==================================================================================================================================================================================================================
go through the nodes of the list:
	save the value of that node into the passed value
OR
if i is a valid element of the linked list:
	go up until node i of the list:
		save the value and key of that node into the passed key and passed value

==================================================================================================================================================================================================================
Map::swap
==================================================================================================================================================================================================================
using temp var, swap size of passed and calling maps
using temp var, swap head pointers of passed and calling maps

==================================================================================================================================================================================================================
subtract (based on m1; could have based on m2 if go through m2 for outer and check with m1 for inner)
==================================================================================================================================================================================================================
set result to an empty map
going through the first array:
	get each node i of the list
	if there is no similar element in m2:
		insert ndoe into result

==================================================================================================================================================================================================================
combine (based on m1; could have based on m2 if go through m1 for outer and check with m2 for inner)
==================================================================================================================================================================================================================
set result to the first array
go through 2nd array:
	get each node i of the list:
	if there is a matching key:
		different values:
			remove node from result
		same value:
			continue
	insert the node of the second array into result

==================================================================================================================================================================================================================
TEST CASES
==================================================================================================================================================================================================================
    Map m1;
    m1.insert("Fred", 2.956);
    Map m2;
    m2.insert("Ethel", 3.538);
    m2.insert("Lucy", 2.956);
    m1.swap(m2);
    assert(m1.size() == 2  &&  m1.contains("Ethel")  &&  m1.contains("Lucy")  && m2.size() == 1  &&  m2.contains("Fred"));
    
    Map m;  // maps strings to doubles
    assert(m.empty());
    ValueType v = -1234.5;
    assert( !m.get("abc", v)  &&  v == -1234.5); // v unchanged by get failure
    m.insert("xyz", 9876.5);
    assert(m.size() == 1);
    KeyType k = "hello";
    assert(m.get(0, k, v)  &&  k == "xyz"  &&  v == 9876.5);
    
    //General Insert Check
    Map m3;
    m3.insert("A", 10);
    m3.insert("B", 44);
    m3.insert("C", 10);
    string all;
    double total = 0;
    for (int n = 0; n < m3.size(); n++)
    {
        string k;
        double v;
        m3.get(n, k, v);
        all += k;
        total += v;
    }
    cout << all << total << endl;
    
    //Repetitivity Check for Insert
    Map gpas;
    gpas.insert("Fred", 2.956);
    gpas.insert("Ethel", 3.538);
    double y;
    string k1;
    assert(gpas.get(1,k1,y)  &&  (k1 == "Fred"  ||  k1 == "Ethel"));
    string k2;
    assert(gpas.get(1,k2,y)  &&  k2 == k1);
    
    //Empty String Test for Insert
    Map gps;
    gps.insert("Fred", 2.956);
    assert(!gps.contains(""));
    gps.insert("Ethel", 3.538);
    gps.insert("", 4.000);
    gps.insert("Lucy", 2.956);
    assert(gps.contains(""));
    gps.erase("Fred");
    assert(gps.size() == 3  &&  gps.contains("Lucy")  &&  gps.contains("Ethel")  &&
           gps.contains(""));
    
    //Update check
    Map tester;
    tester.insert("Doggo" , 45.5);
    assert(tester.contains("Doggo"));
    tester.update("Doggo" , 10);
    double x;
    assert(tester.get("Doggo" , x) && x == 10);
    
    //Subtract Check
    Map tester1;
    tester1.insert("Fred", 2.956);
    tester1.insert("Ethel", 3.538);
    tester1.insert("Lucy", 2.956);
    Map tester2;
    tester2.insert("Ethel", 3.538);
    tester2.insert("Lucy", 2.956);
    tester2.insert("Jacob" , 3.224);
    Map resultant;
    subtract(tester1,tester2,resultant);
    assert(resultant.contains("Fred") && resultant.size() == 1);
    subtract(tester2,tester1,resultant);
    assert(resultant.contains("Jacob") && !resultant.contains("Fred"));
    
    //Combine Check
    Map tester3;
    tester3.insert("Fred", 2.956);
    tester3.insert("Ethel", 3.538);
    tester3.insert("Lucy", 2.56);
    Map tester4;
    tester4.insert("Lucy", 2.956);
    tester4.insert("Ricky", 4.0);
    Map resulting;
    combine(tester3,tester4,resulting);
    assert(!resulting.contains("Lucy"));
    combine(tester4,tester3,resulting);
    assert(resulting.size() == 3);




